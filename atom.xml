<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朱家顺的博客</title>
  
  <subtitle>回望沿途，眺望生活</subtitle>
  <link href="http://ryan6073.github.io/atom.xml" rel="self"/>
  
  <link href="http://ryan6073.github.io/"/>
  <updated>2023-03-05T07:51:14.457Z</updated>
  <id>http://ryan6073.github.io/</id>
  
  <author>
    <name>浥青城</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Find joy in our life | 《遗愿清单》</title>
    <link href="http://ryan6073.github.io/2023/03/05/Find-joy-in-our-life-%E3%80%8A%E9%81%97%E6%84%BF%E6%B8%85%E5%8D%95%E3%80%8B/"/>
    <id>http://ryan6073.github.io/2023/03/05/Find-joy-in-our-life-%E3%80%8A%E9%81%97%E6%84%BF%E6%B8%85%E5%8D%95%E3%80%8B/</id>
    <published>2023-03-05T07:46:45.000Z</published>
    <updated>2023-03-05T07:51:14.457Z</updated>
    
    <content type="html"><![CDATA[<p>”Our lives are streams flowing into the same river towards whatever heaven lies in the mist beyond the falls.”<br>这是卡特写给爱德华的遗言中的一句，最后的遗愿，他通过遗言的形式和爱德华一起实现了。这样的结局实在是悲伤，却也太过于完美以至于我心中的喟叹久久不能平息，至此的时候，卡特其实已经完成了他最想完成的遗愿，但是他心知爱德华还没有解开自己最后的心结，所以卡特在犹豫中还是将这封遗言转交给了爱德华，卡特也知道他的离去，是最后能够打动爱德华去与女儿见面解开心结的契机，所以一切似乎那么悲伤，却又恰到好处，任何一个变化都会使得这样的结局不再完美，哪怕是他们中有人活了下来，都会降低这部电影结局的艺术价值，也许这也算是悲剧艺术的魅力。<br>我会想写一些话，算是记录，也算是希望这些话可以让更多的人看到，美好的艺术永远值得分享和传递。<br>在人生的旅途中，我们常常因为追求更好的东西、更多的钱、更高的地位而忽略了自己内心真正的诉求，人死后其实什么也带不走，我们努力生活、努力学习和工作，其实都是没有错的，爱德华白手起家，卡特放弃自己的梦想选择了家庭，他们都没有错，甚至如果说卡特坚定自己的梦想，选择了继续深造，也不算错，他们两个可以说是性格不同，命运中十字路口处的抉择也不同，最后一个大富大贵却茕茕孑立，一个担起家庭却埋没了梦想，在我们抓住某些东西的时候，注定就丢掉了一些东西，人生就像一个人在沙漠中独行，体力有限、承重有限、眼界有限、生命有限，这都是不可避免的，我们不可避免会犯错，不可避免会患得患失，不可避免会老去，就像电影中的爱德华和卡特一样，但是我们需要知道自己想做什么，并且不要让自己抱憾终生。<br>生活却不是电影，即使是电影，最后一条遗愿也是爱德华通过钞能力让他人代为实现的，因此我更想说的是，也许你正值青年、中年或者老年，但是都不要觉得为时过早或者为时过晚，因为所想的最佳所做时机就是计划中，在现在或者不久的将来，我们需要调动身体的能量，在这个清单上时刻增减，不要只减不增或者只增不减。这也许也算是人生的一部分意义，我们时刻在做对于我们生命有意义的事情，每一件事情都给我们的生命拓展了宽度，延伸了深度。我也希望我们的清单不会叫做遗愿清单，而是人生清单，因为这样深刻的道理如果是以死亡为契机才被领悟到，那也未免太过于可惜了。<br>所以，如果你对我说的话有一定情绪反应，那么请你去看看这部电影，我相信它会给你想要的答案。<br>Even as the eyes are closing ,do it with a heart open,a wide heart say what you need to say.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;”Our lives are streams flowing into the same river towards whatever heaven lies in the mist beyond the falls.”&lt;br&gt;这是卡特写给爱德华的遗言中的一句，最后的遗愿，</summary>
      
    
    
    
    <category term="movie" scheme="http://ryan6073.github.io/categories/movie/"/>
    
    
    <category term="遗愿清单" scheme="http://ryan6073.github.io/tags/%E9%81%97%E6%84%BF%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>爬虫爬取豆瓣书单</title>
    <link href="http://ryan6073.github.io/2023/01/17/%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E4%B9%A6%E5%8D%95/"/>
    <id>http://ryan6073.github.io/2023/01/17/%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E4%B9%A6%E5%8D%95/</id>
    <published>2023-01-17T15:01:33.000Z</published>
    <updated>2023-03-05T07:48:43.313Z</updated>
    
    <content type="html"><![CDATA[<p>我用了python爬虫中很有名的第三方库beautiful soup库来完成爬取，而这一代码其实是改进了简书上一位博主的代码，他的代码是16年的，其中有很多东西放到现在已经需要改动，而最重要的爬取信息的方式还需要重写，我对这些问题进行了解决并优化了一些他的方法，于是总结在此。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">import pymysql</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_tag():</span><br><span class="line">    channel = []</span><br><span class="line">    headers = &#123;&#x27;User-Agent&#x27;: &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&quot;&#125;</span><br><span class="line">    # 利用request模块进行访问获取内容</span><br><span class="line">    url = &quot;https://book.douban.com/tag/?icn=index-nav&quot;</span><br><span class="line">    wb_data = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(wb_data.text, &quot;lxml&quot;)  # 解析网页信息</span><br><span class="line">    tags = soup.select(&quot;table.tagCol &gt; tbody &gt; tr &gt; td &gt; a&quot;)</span><br><span class="line">    # 根据CSS路径查找标签信息，CSS路径获取方法，右键-检查-copy selector，tags返回的是一个列表</span><br><span class="line">    for tag in tags:</span><br><span class="line">        tag = tag.get_text()  # 将列表中的每一个标签信息提取出来</span><br><span class="line">        helf = &quot;https://book.douban.com/tag/&quot;</span><br><span class="line">        # 观察一下豆瓣的网址，基本都是这部分加上标签信息，所以我们要组装网址，用于爬取标签详情页</span><br><span class="line">        url = helf + str(tag)</span><br><span class="line">        channel.append(url)  # 网址组装完毕，输出</span><br><span class="line">    return channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ceshi_price_one(detail):</span><br><span class="line">    price = detail.split(&quot;/&quot;, 4)[4].split()</span><br><span class="line">    if re.match(&quot;USD&quot;, price[0]):</span><br><span class="line">        price = float(price[1]) * 6</span><br><span class="line">    elif re.match(&quot;CNY&quot;, price[0]):</span><br><span class="line">        price = price[1]</span><br><span class="line">    elif re.match(&quot;\A$&quot;, price[0]):</span><br><span class="line">        price = float(price[1:len(price)]) * 6</span><br><span class="line">    else:</span><br><span class="line">        price = price[0]</span><br><span class="line"></span><br><span class="line">    return price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ceshi_price_two(detail):</span><br><span class="line">    price = detail.split(&quot;/&quot;, 3)[3].split()</span><br><span class="line">    if re.match(&quot;USD&quot;, price[0]):</span><br><span class="line">        price = float(price[1]) * 6</span><br><span class="line">    elif re.match(&quot;CNY&quot;, price[0]):</span><br><span class="line">        price = price[1]</span><br><span class="line">    elif re.match(&quot;\A$&quot;, price[0]):</span><br><span class="line">        price = float(price[1:len(price)]) * 6</span><br><span class="line">    else:</span><br><span class="line">        price = price[0]</span><br><span class="line">    return price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mains(url):</span><br><span class="line">    headers = &#123;&#x27;User-Agent&#x27;: &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&quot;&#125;</span><br><span class="line">    wb_data = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(wb_data.text.encode(&quot;utf-8&quot;), &quot;lxml&quot;)</span><br><span class="line">    tag = url.split(&quot;?&quot;)[0].split(&quot;/&quot;)[-1]</span><br><span class="line">    content_list = soup.select(&quot;#subject_list &gt; ul &gt; li&quot;)</span><br><span class="line">    titles = []</span><br><span class="line">    details = []</span><br><span class="line">    scores = []</span><br><span class="line">    persons = []</span><br><span class="line"></span><br><span class="line">    for lis in content_list:</span><br><span class="line">        title = lis.select(&quot;div.info &gt; h2 &gt; a&quot;)  # 书名</span><br><span class="line">        if title:</span><br><span class="line">            title = title[0].get_text().replace(&quot;\n&quot;, &#x27;&#x27;).replace(&quot; &quot;, &#x27;&#x27;).strip()</span><br><span class="line">        else:</span><br><span class="line">            title = &#x27;&#x27;</span><br><span class="line">        titles.append(title)</span><br><span class="line">        detail = lis.select(&quot;div.info &gt; div.pub&quot;)</span><br><span class="line">        if detail:</span><br><span class="line">            detail = detail[0].get_text().replace(&quot;\n&quot;, &#x27;&#x27;).replace(&quot; &quot;, &#x27;&#x27;).strip()</span><br><span class="line">        else:</span><br><span class="line">            detail = &#x27;&#x27;</span><br><span class="line">        details.append(detail)</span><br><span class="line">        score = lis.select(&quot;div.info &gt; div.star.clearfix &gt; span.rating_nums&quot;)</span><br><span class="line">        if score:</span><br><span class="line">            score = score[0].get_text().replace(&quot;\n&quot;, &#x27;&#x27;).replace(&quot; &quot;, &#x27;&#x27;).strip()</span><br><span class="line">        else:</span><br><span class="line">            score = &#x27;&#x27;</span><br><span class="line">        scores.append(score)</span><br><span class="line">        person = lis.select(&quot;div.info &gt; div.star.clearfix &gt; span.pl&quot;)  # 评价人数</span><br><span class="line">        if person:</span><br><span class="line">            person = person[0].get_text().replace(&quot;\n&quot;, &#x27;&#x27;).replace(&quot; &quot;, &#x27;&#x27;).strip().replace(&quot;人评价)&quot;, &quot;&quot;).replace(&quot;(&quot;,</span><br><span class="line">                                                                                                                    &quot;&quot;)</span><br><span class="line">        else:</span><br><span class="line">            person = &#x27;10&#x27;</span><br><span class="line">        persons.append(person)</span><br><span class="line"></span><br><span class="line">    for detail, score, person, title in zip(details, scores, persons, titles):</span><br><span class="line">        l = []  # 建一个列表，用于存放数据</span><br><span class="line">        try:</span><br><span class="line">            author = detail.split(&quot;/&quot;, 4)[0].split()[0]</span><br><span class="line">            translator = detail.split(&quot;/&quot;, 4)[1]</span><br><span class="line">            publish = detail.split(&quot;/&quot;, 4)[2]</span><br><span class="line">            time = detail.split(&quot;/&quot;, 4)[3].split()[0].split(&quot;-&quot;)[0]</span><br><span class="line">            price = ceshi_price_one(detail)</span><br><span class="line">            score = score if True else &quot;&quot;</span><br><span class="line">            title = title.split()[0]</span><br><span class="line">        except IndexError:</span><br><span class="line">            try:</span><br><span class="line">                author = detail.split(&quot;/&quot;, 3)[0].split()[0]</span><br><span class="line">                translator = &quot;&quot;</span><br><span class="line">                publish = detail.split(&quot;/&quot;, 3)[1]</span><br><span class="line">                time = detail.split(&quot;/&quot;, 3)[2].split()[0].split(&quot;-&quot;)[0]</span><br><span class="line">                price = ceshi_price_two(detail)</span><br><span class="line">                score = score if True else &quot;&quot;</span><br><span class="line">                title = title.split()[0]</span><br><span class="line">            except (IndexError, TypeError):</span><br><span class="line">                continue</span><br><span class="line">        except TypeError:</span><br><span class="line">            continue</span><br><span class="line">        l.append([title, score, author, price, time, publish, person, translator, tag])</span><br><span class="line">        print(l)</span><br><span class="line">        sql = &quot;INSERT INTO all_books values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;  # 这是一条sql插入语句</span><br><span class="line">        cur.executemany(sql, l)  # 执行sql语句，并用executemany()函数批量插入数据库中</span><br><span class="line">        conn.commit()  # 提交</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># mains(&quot;https://book.douban.com/tag/科技?start=0&amp;type=T&quot;)</span><br><span class="line"># 将Python连接到MySQL中的python数据库中</span><br><span class="line">conn = pymysql.connect(user=&quot;root&quot;, password=&quot;你的数据库user密码（不一定是root用户）&quot;, database=&quot;douban_db&quot;, charset=&#x27;utf8&#x27;)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(&#x27;DROP TABLE IF EXISTS all_books&#x27;)  # 如果数据库中有all_books的数据库则删除</span><br><span class="line">sql = &quot;&quot;&quot;CREATE TABLE all_books(</span><br><span class="line">        title CHAR(255) NOT NULL,</span><br><span class="line">        score CHAR(255),</span><br><span class="line">        author CHAR(255),</span><br><span class="line">        price CHAR(255),</span><br><span class="line">        time CHAR(255),</span><br><span class="line">        publish CHAR(255),</span><br><span class="line">        person CHAR(255),</span><br><span class="line">        translator CHAR(255),</span><br><span class="line">        tag CHAR(255)</span><br><span class="line"> )ENGINE = InnoDB DEFAULT CHARSET = utf8;&quot;&quot;&quot;</span><br><span class="line">cur.execute(sql)  # 执行sql语句，新建一个all_books的数据库</span><br><span class="line"></span><br><span class="line">start = time.process_time()</span><br><span class="line"># 设置一个时钟，这样我们就能知道我们爬取了多长时间了</span><br><span class="line">channel = get_tag()</span><br><span class="line">for urls in channel:</span><br><span class="line">    urlss = [urls + &quot;?start=&#123;&#125;&amp;type=T&quot;.format(str(i)) for i in range(0, 980, 20)]  # 从channel中提取url信息，并组装成每一页的链接</span><br><span class="line">    for url in urlss:</span><br><span class="line">        mains(url)  # 执行主函数，开始爬取</span><br><span class="line">        print(url)  # 输出要爬取的链接，这样我们就能知道爬到哪了，发生错误也好处理</span><br><span class="line">        time.sleep(int(format(random.randint(2, 5))))  # 设置一个随机数时间，每爬一个网页可以随机的停一段时间，防止IP被封</span><br><span class="line">end = time.process_time()</span><br><span class="line">print(&#x27;Time Usage:&#x27;, end - start)  # 爬取结束，输出爬取时间</span><br><span class="line">count = cur.execute(&#x27;select * from all_books&#x27;)</span><br><span class="line">print(&#x27;has %s record&#x27; % count)  # 输出爬取的总数目条数</span><br><span class="line"></span><br><span class="line"># 释放数据连接</span><br><span class="line">if cur:</span><br><span class="line">    cur.close()</span><br><span class="line">if conn:</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我用了python爬虫中很有名的第三方库beautiful soup库来完成爬取，而这一代码其实是改进了简书上一位博主的代码，他的代码是16年的，其中有很多东西放到现在已经需要改动，而最重要的爬取信息的方式还需要重写，我对这些问题进行了解决并优化了一些他的方法，于是总结在此</summary>
      
    
    
    
    <category term="Python" scheme="http://ryan6073.github.io/categories/Python/"/>
    
    
    <category term="豆瓣书单" scheme="http://ryan6073.github.io/tags/%E8%B1%86%E7%93%A3%E4%B9%A6%E5%8D%95/"/>
    
    <category term="爬虫" scheme="http://ryan6073.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之单链表以及改良</title>
    <link href="http://ryan6073.github.io/2023/01/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%89%AF/"/>
    <id>http://ryan6073.github.io/2023/01/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%89%AF/</id>
    <published>2023-01-17T09:25:04.000Z</published>
    <updated>2023-01-17T15:52:33.720Z</updated>
    
    <content type="html"><![CDATA[<p>在学完单链表后，我发现网上的代码大多是以C语言的面向过程的思想写就的，于是我想用C++面对对象的思想重新构建一下单链表类。经过对照所有能获取的资料，总结了一共两套代码，第一套是体现的基本的链表思想，第二套则尝试融入更多带有C++特性的东西。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;malloc.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxSize = 100;//设置链表最大尺寸</span><br><span class="line"></span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">class Single_Llist//单链表   </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">T data;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* next;</span><br><span class="line">explicit Node(Single_Llist&lt;T&gt;::Node* ptr = nullptr) :data(T&#123;&#125;), next(ptr) &#123;&#125;</span><br><span class="line">Node(const T&amp; item, Single_Llist&lt;T&gt;::Node* ptr = nullptr) :data(item), next(ptr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Single_Llist()//构造函数</span><br><span class="line">&#123;</span><br><span class="line">head = new Single_Llist&lt;T&gt;::Node;</span><br><span class="line">head-&gt;next = nullptr;</span><br><span class="line">tail = nullptr;</span><br><span class="line">&#125;</span><br><span class="line">Single_Llist(const Single_Llist&lt;T&gt;&amp; L);//拷贝构造函数 </span><br><span class="line"></span><br><span class="line">~Single_Llist()</span><br><span class="line">&#123;</span><br><span class="line">clear();</span><br><span class="line">&#125;</span><br><span class="line">void clear(); //清空链表</span><br><span class="line">size_t getSize() const;//返回链表长度</span><br><span class="line">typename Single_Llist&lt;T&gt;::Node* getHead() const &#123; return head; &#125;//返回头指针</span><br><span class="line">typename Single_Llist&lt;T&gt;::Node* getTail() const;//返回尾节点</span><br><span class="line">typename Single_Llist&lt;T&gt;::Node* getFirst() const &#123; return head-&gt;next; &#125;//返回第一个节点</span><br><span class="line">Single_Llist&lt;T&gt;* Search(const T&amp; x) const;//查找</span><br><span class="line">Single_Llist&lt;T&gt;* Locate(size_t i) const;//定位(第i个节点)</span><br><span class="line">bool getData(int i, T&amp; x) const;//取第i个节点的值</span><br><span class="line">bool setData(int i, const T&amp; x);//改变第i个节点的值</span><br><span class="line">bool Insert(int i, const T&amp; x);//在第i个节点前插入x(可以通过next域实现在结点后插入)</span><br><span class="line">bool Remove(int i, T&amp; x);//删除第i个节点</span><br><span class="line">bool IsEmpty() const</span><br><span class="line">&#123;</span><br><span class="line">return head-&gt;next == nullptr;</span><br><span class="line">&#125;</span><br><span class="line">bool IsFull() const &#123; return maxSize &lt;= getSize() ? true : false; &#125;</span><br><span class="line">void Sort();//  可以改进一下，归并排序</span><br><span class="line">void CreateList(T endTag);//前插法创建单链表</span><br><span class="line">void CreateList_byback(T endTag);//后插法创建单链表</span><br><span class="line">void print();//打印单链表</span><br><span class="line">void Merge(Single_Llist&lt;T&gt;&amp; LA, Single_Llist&lt;T&gt;&amp; LB);//归并两条单链表并有序排列（去除重复元素）,有点类似于构造函数</span><br><span class="line">Single_Llist&lt;T&gt;&amp; operator=(const Single_Llist&lt;T&gt;&amp; rhs);</span><br><span class="line">protected:</span><br><span class="line">Single_Llist&lt;T&gt;::Node* head;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* tail;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline Single_Llist&lt;T&gt;::Single_Llist(const Single_Llist&lt;T&gt;&amp; L)</span><br><span class="line">&#123;</span><br><span class="line">head = tail = new Single_Llist&lt;T&gt;::Node;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* desptr = head;</span><br><span class="line">T value;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* srcptr = L.getFirst();</span><br><span class="line">while (srcptr != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">value = srcptr-&gt;data;</span><br><span class="line">desptr-&gt;next = new Single_Llist&lt;T&gt;::Node(value);</span><br><span class="line">srcptr = srcptr-&gt;next;</span><br><span class="line">desptr = desptr-&gt;next;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">desptr-&gt;next = nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline Single_Llist&lt;T&gt;&amp; Single_Llist&lt;T&gt;::operator=(const Single_Llist&lt;T&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">head = tail = new Single_Llist&lt;T&gt;::Node;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* desptr = head;</span><br><span class="line">T value;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* srcptr = rhs.getFirst();</span><br><span class="line">while (srcptr != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">value = srcptr-&gt;data;</span><br><span class="line">desptr-&gt;next = new Single_Llist&lt;T&gt;::Node(value);</span><br><span class="line">srcptr = srcptr-&gt;next;</span><br><span class="line">desptr = desptr-&gt;next;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">desptr-&gt;next = nullptr;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::clear()</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* q = p-&gt;next;</span><br><span class="line">delete p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">head-&gt;next = nullptr;</span><br><span class="line">tail = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline size_t Single_Llist&lt;T&gt;::getSize() const</span><br><span class="line">&#123;</span><br><span class="line">size_t count = 0;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline typename Single_Llist&lt;T&gt;::Node* Single_Llist&lt;T&gt;::getTail() const</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p-&gt;next != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline Single_Llist&lt;T&gt;* Single_Llist&lt;T&gt;::Search(const T&amp; x) const</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">if (p-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline Single_Llist&lt;T&gt;* Single_Llist&lt;T&gt;::Locate(size_t i) const</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool Single_Llist&lt;T&gt;::getData(int i, T&amp; x) const</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">x = p-&gt;data;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool Single_Llist&lt;T&gt;::setData(int i, const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;data = x;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool Single_Llist&lt;T&gt;::Insert(int i, const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* q = new Single_Llist&lt;T&gt;::Node;</span><br><span class="line">q-&gt;data = x;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool Single_Llist&lt;T&gt;::Remove(int i, T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* q = p-&gt;next;</span><br><span class="line">x = q-&gt;data;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">delete q;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::Sort()</span><br><span class="line">&#123;</span><br><span class="line">int flag = 0;</span><br><span class="line">while (flag == 0)</span><br><span class="line">&#123;</span><br><span class="line">flag = 1;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p-&gt;next != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">if (p-&gt;data &gt; p-&gt;next-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">T temp = p-&gt;data;</span><br><span class="line">p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">p-&gt;next-&gt;data = temp;</span><br><span class="line">flag = 0;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::CreateList(T endTag)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;前插法&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;输入数据，以&quot; &lt;&lt; endTag &lt;&lt; &quot;结束&quot; &lt;&lt; endl;</span><br><span class="line">T val;//停止输入的标志:endTag</span><br><span class="line">clear();</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line">bool flag = false;</span><br><span class="line">while (val != endTag)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* newNode = new Single_Llist&lt;T&gt;::Node(val);</span><br><span class="line">if (newNode == nullptr)  cout &lt;&lt; &quot;内存分配失败&quot; &lt;&lt; endl;</span><br><span class="line">newNode-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = newNode;</span><br><span class="line">if (flag == false)</span><br><span class="line">&#123;</span><br><span class="line">tail = head-&gt;next;</span><br><span class="line">tail-&gt;next = nullptr;</span><br><span class="line">flag = true;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::CreateList_byback(T endTag)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;后插法&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;输入数据， 以 &quot; &lt;&lt; endTag &lt;&lt; &quot;结束&quot; &lt;&lt; endl;</span><br><span class="line">T val;</span><br><span class="line">clear();</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line">while (val != endTag)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* newNode = new Single_Llist&lt;T&gt;::Node(val);</span><br><span class="line">if (newNode == nullptr) cout &lt;&lt; &quot;内存分配失败&quot; &lt;&lt; endl;</span><br><span class="line">tail-&gt;next = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::print()</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; &quot; &quot;;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::Merge(Single_Llist&lt;T&gt;&amp; LA, Single_Llist&lt;T&gt;&amp; LB)</span><br><span class="line">&#123;</span><br><span class="line">LA.Sort(), LB.Sort();</span><br><span class="line">Single_Llist&lt;T&gt;::Node* current = head;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* ptra = LA.getFirst();</span><br><span class="line">Single_Llist&lt;T&gt;::Node* ptrb = LB.getFirst();</span><br><span class="line">while (ptra &amp;&amp; ptrb)</span><br><span class="line">&#123;</span><br><span class="line">T x, y;</span><br><span class="line">x = ptra-&gt;data;</span><br><span class="line">y = ptrb-&gt;data;</span><br><span class="line">if (x &lt; y)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(x);</span><br><span class="line">ptra = ptra-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">if (x &gt; y)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(y);</span><br><span class="line">ptrb = ptrb-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(x);</span><br><span class="line">ptra = ptra-&gt;next;</span><br><span class="line">ptrb = ptrb-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while (ptra)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(ptra-&gt;data);</span><br><span class="line">ptra = ptra-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">tail = ptra;</span><br><span class="line">&#125;</span><br><span class="line">while (ptrb)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(ptrb-&gt;data);</span><br><span class="line">ptrb = ptrb-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">tail = ptrb;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中间略微总结一下我遇到的问题吧，首先就是发现使用模板后.h文件和.cpp文件链接不上，这算是模板类特有的写法，因为当实例化一个模板时，编译器必须看到模板确切的定义，而不仅仅是它的声明。因此，最好的办法就是将模板的声明和定义都放置在同一个.h文件中，在实现时用inline修饰保证函数符号只有一个,当然用static修饰也是可以的。(需要注意，inline是不能用在普通类普通链接实现中的，新标准取消了默认情况下inline作为内联函数的含义)</p><p>关于这一点我还发现了一个算是邪门歪道的方法，就是如果要写正常的翻译单元，也就是.h和.cpp文件，正常链接也是可以的，只需要在主函数里从原来的包含翻译单元头文件改成包含翻译单元源文件就行，但是这个方法具有很大的局限性，就是如果翻译单元里有除了模板函数以外的具体函数，那么就会报错重定义了符号。因为编译是按源文件编译，include的作用仅仅是拷贝文件到指定位置，要是在主函数(.cpp)里包含.cpp，相当于被包含的翻译单元中的函数被编译了两遍。而模板函数能成为例外的原因，就在于inline关键字，是作用于全局的，保证在函数全名相同(namespace::classname::funcname)的情况下，同名函数只被编译一次，只保留一个版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在学完单链表后，我发现网上的代码大多是以C语言的面向过程的思想写就的，于是我想用C++面对对象的思想重新构建一下单链表类。经过对照所有能获取的资料，总结了一共两套代码，第一套是体现的基本的链表思想，第二套则尝试融入更多带有C++特性的东西。&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="数据结构" scheme="http://ryan6073.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="单链表" scheme="http://ryan6073.github.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
    <category term="面对对象" scheme="http://ryan6073.github.io/tags/%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>2022年末，我做了一件很酷的事</title>
    <link href="http://ryan6073.github.io/2022/12/31/2022%E5%B9%B4%E6%9C%AB%EF%BC%8C%E6%88%91%E5%81%9A%E4%BA%86%E4%B8%80%E4%BB%B6%E5%BE%88%E9%85%B7%E7%9A%84%E4%BA%8B/"/>
    <id>http://ryan6073.github.io/2022/12/31/2022%E5%B9%B4%E6%9C%AB%EF%BC%8C%E6%88%91%E5%81%9A%E4%BA%86%E4%B8%80%E4%BB%B6%E5%BE%88%E9%85%B7%E7%9A%84%E4%BA%8B/</id>
    <published>2022-12-31T15:43:39.000Z</published>
    <updated>2023-01-17T15:46:03.542Z</updated>
    
    <content type="html"><![CDATA[<p>只是觉得有一个个人博客是一件很酷的事情，于是就去做了</p><p>前几天突发奇想，突然想要拥有一个个人网站，又难得没有别的事情要忙，于是干脆一不做二不休选择了做一个个人博客。现在想起来其实很容易，但是当时实现的时候花费的时间却远比想象要多，因为一开始也没敲定要用Hexo搭建，甚至每种技术都去了解了一下，还没开始就花费了许多精力，所以预想一两天做完的事情实际花了大约四五天，过程也是十分曲折。</p><p>虽然这可能没有特别多的意义，甚至博客也不会有很多访问，但是我还是想要把这件事情做好，后续也会不断完善整个网站的功能，包括评论留言板，聊天室，搜索系统等等。当然，这些只是技术层面上的事情，我个人分享的博客内容，后续也会完善一些，大致会开放我喜欢的音乐，推荐的电影，遇见的有趣的人和事，好玩的游戏，当然也会有我大学学习过程中一些专业相关的知识总结，整体来说大概就是定位在一个雅俗共赏的个人空间吧，如果你有很好的建议，请留言给我，如果你相信我是潜力股，请一定要收藏起来我的个人博客，这也许会在未来的某天给到你意想不到的帮助，而你的关注一定会给到我不可或缺的帮助！</p><p>所以，十分荣幸能在此与你相遇，那么，请多多指教，在这熙熙攘攘的现代世界，请享受我为你我开辟的，这安静的小小一隅。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;只是觉得有一个个人博客是一件很酷的事情，于是就去做了&lt;/p&gt;
&lt;p&gt;前几天突发奇想，突然想要拥有一个个人网站，又难得没有别的事情要忙，于是干脆一不做二不休选择了做一个个人博客。现在想起来其实很容易，但是当时实现的时候花费的时间却远比想象要多，因为一开始也没敲定要用Hexo搭</summary>
      
    
    
    
    <category term="个人随想" scheme="http://ryan6073.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="兴趣" scheme="http://ryan6073.github.io/tags/%E5%85%B4%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客之部署butterfly小结</title>
    <link href="http://ryan6073.github.io/2022/12/29/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%83%A8%E7%BD%B2butterfly%E5%B0%8F%E7%BB%93/"/>
    <id>http://ryan6073.github.io/2022/12/29/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%83%A8%E7%BD%B2butterfly%E5%B0%8F%E7%BB%93/</id>
    <published>2022-12-29T07:27:51.000Z</published>
    <updated>2023-01-17T15:48:49.353Z</updated>
    
    <content type="html"><![CDATA[<p>更换butterfly主题后报错：extends includes&#x2F;layout.pug block content #recent-posts.recent-posts include includes&#x2F;recent-posts.pug include includes&#x2F;pagination.pug<br>原因在于butterfly的git仓库很久没更新了，而依赖的组件很多易名或者不支持了，所以需要更新一下，在Git Bash里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>然后会出现很多提醒和报错，按照提示输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm audit fix</span><br></pre></td></tr></table></figure><p>之后正常更新一下静态文件重新生成即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;更换butterfly主题后报错：extends includes&amp;#x2F;layout.pug block content #recent-posts.recent-posts include includes&amp;#x2F;recent-posts.pug include</summary>
      
    
    
    
    <category term="博客搭建" scheme="http://ryan6073.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="部署butterfly" scheme="http://ryan6073.github.io/tags/%E9%83%A8%E7%BD%B2butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github博客搭建小结</title>
    <link href="http://ryan6073.github.io/2022/12/27/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%BB%93/"/>
    <id>http://ryan6073.github.io/2022/12/27/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%BB%93/</id>
    <published>2022-12-27T14:25:51.000Z</published>
    <updated>2023-01-17T15:47:13.342Z</updated>
    
    <content type="html"><![CDATA[<p>时至如今，其实个人博客搭建网上已经有很好的教程了，我也不赘述前人观点了，仅在我发现的大佬<a href="%22https://godweiyang.com/2018/04/13/hexo-blog/%22">韦阳</a>的一篇十分优秀的博客介绍上稍加补充，这里我主要讲一下博客中“连接GitHub和本地步骤”这一部分的出入：<br>首先右键打开Git Bash,然后输入下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;ryan6073&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;zhujs5521@mails.jlu.edu.cn&quot;</span></span><br></pre></td></tr></table></figure><p>这一步没有任何变化，用户名和邮箱根据GitHub账号信息自行修改即可。<br>然后下面rsa生成密钥SSH key这里出了问题，原因在于GitHub在2021年11月之后更新了签名算法，并且强制执行。按照原来的步骤执行会出现警告，然后提示要用到ED25519，这一点在GitHub网页端也可以得到印证，根据GitHub的提示，这样来操作即可，这里仍然是在Git Bash里输入命令，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C <span class="string">&quot;zhujs5521@mails.jlu.edu.cn&quot;</span></span><br></pre></td></tr></table></figure><p>然后在GitHub里新建SSH，这里也发生了改变，因为签名算法的改变，key并不能像之前一样写，需要这么输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure><p>复制输出的内容到新建SSH的key框中，名字照常随便取。然后让我们来检验一下就好了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现你的用户名，并且GitHub向你打招呼了，就算成功了。</p><p>另外，如果上传博客时出现Git报错：<br>fatal: unable to access OpenSSL SSL_read: Connection was reset, errno 10054<br>那么这时应该是因为服务器的SSL证书没有经过第三方机构签署，所以要输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.sslVerify “<span class="literal">false</span>”</span><br></pre></td></tr></table></figure><p>参考：<br><a href="%22https://godweiyang.com/2018/04/13/hexo-blog/%22">韦阳的博客</a><br><a href="%22https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account%22">GitHub关于新建SSH的教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时至如今，其实个人博客搭建网上已经有很好的教程了，我也不赘述前人观点了，仅在我发现的大佬&lt;a href=&quot;%22https://godweiyang.com/2018/04/13/hexo-blog/%22&quot;&gt;韦阳&lt;/a&gt;的一篇十分优秀的博客介绍上稍加补充，这里我主要讲一下</summary>
      
    
    
    
    <category term="博客搭建" scheme="http://ryan6073.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="http://ryan6073.github.io/tags/Hexo/"/>
    
    <category term="Github" scheme="http://ryan6073.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
