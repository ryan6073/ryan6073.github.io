<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朱家顺的博客</title>
  
  <subtitle>回望沿途，眺望生活</subtitle>
  <link href="http://ryan6073.github.io/atom.xml" rel="self"/>
  
  <link href="http://ryan6073.github.io/"/>
  <updated>2023-03-05T15:30:59.602Z</updated>
  <id>http://ryan6073.github.io/</id>
  
  <author>
    <name>浥青城</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我以我心拥自由</title>
    <link href="http://ryan6073.github.io/2023/03/05/%E6%88%91%E4%BB%A5%E6%88%91%E5%BF%83%E6%8B%A5%E8%87%AA%E7%94%B1/"/>
    <id>http://ryan6073.github.io/2023/03/05/%E6%88%91%E4%BB%A5%E6%88%91%E5%BF%83%E6%8B%A5%E8%87%AA%E7%94%B1/</id>
    <published>2023-03-05T15:10:27.000Z</published>
    <updated>2023-03-05T15:30:59.602Z</updated>
    
    <content type="html"><![CDATA[<p>一、儒道背后的枷锁：为了一颗初心</p><p>儒道两家是差异的，亦是互补的，在我看来，打个不恰当的比方，即道家让我们一生不出门，顶多为生计所迫到门口集市买点生活必需品，因为外面太肮脏而我们无以抵御。儒家倡导我们出门，但一定要在已知的世界添砖加瓦，开拓新世界是万万不可取的，要出门就应按部就班，秩序是天大的：和皇帝地位等同。</p><p>以我这个描述，不难看出，儒家和道家都对人的本性有着莫大的约束，并且道家的“无为”的约束要求比想象中更高更严。（当然，我所论述的：其实多半是孔子和老子的儒道，可能会有所片面)</p><p>鲍鹏山亦认为两家创始人孔子和老子是恋旧的哲学家，在旧世界里唱着永恒的恋歌。确实如此，他们所向往的社会，大多在西周乃至更早的历史时代。生产力开始像脱缰的野马奔腾向前，人们的心也不受控制地开始变质了。孔子预见到了这一点，于是想从美好的旧时代钩玄提要，用以安抚随着经济发展而茁壮的野心。</p><p>孔子是如何做的呢？周游列国，宣扬他的思想和人格。他希望用礼教的方式重新点燃士子正走向异化的心灵，而结果令人惋惜。各个君主礼让他，尊敬他，但不相信他。是这样一个温和且笃定的圣人，却辗转奔波了大半生，灰头土脸地回乡著书去了。他的大同社会，君子理论大家都爱听，却不愿真心恪行，因为这意味着失去利————这个诱人的馅饼。富贵容易弄丢初心，圣贤一生心血仁义礼智信，我们照搬下来了，但其背后的初心我们因渐渐忘却，因此我们的仁义也就有些不真诚，甚至沦为政客玩弄权柄的工具。</p><p>“初心”这个词十分玄奥，在我看来与老子的道这一概念最为契合。看儒家“有为”背景下的繁文缛节，其背后的初心是一个和谐的社会，这是儒家千错万错后面一定真诚的真理，也是我们应当继承的初心。</p><p>那么老子的道家呢？为何我说其要求更严呢？“故失道而后德，失德而后仁，失仁而后义，失义而后礼。失礼者，忠信之薄而乱之首也。”这是多么真实扎心的预言啊！顺其自然的“无为”，确是初心呀！但是最难做到的呀！路不拾遗，这是道德，但路上看到钱大多数人第一反应是捡，且有相当部分人这么做了。那么捡是顺其自然吗？其间道理不言而喻。谁又能在一生中真正顺应自然天理呢？因此，老子说要小国寡民，要历史退化，他是追求完美的极端者啊！</p><p>后来的世道完美印证了老子的预言。就一般而言，说淡泊名利的，名利一来就殷勤热烈了，奉仁义之说的，利益出现就只会巧舌如簧了。高尚是高尚者的墓志铭，卑部是卑鄙者的通行证。有些东西就是这样，一个现象的出现就一发不可收拾，于是无价的东西就真的失去了价值。当我们需要用枷锁来定义高尚时，说明世道已十足卑鄙了。</p><p>当我们与先贤相去甚远时我们就应当开始反思了：当老子出走的时就应当开始了；当一个绝顶智者都不屑于为我们发光发热时，就应当开始了。时至今日，哪怕儒道之中有太多槽糠要被摒弃，我们仍需思索其中的价值————甚至有人需要从其间形而下的制度中寻找药方，我们就更应思考这个问题了。</p><p>二、儒道以后的自由：不忘那一颗初心</p><p>过去盛行的是儒道理论，当今流行讲自由，但我认为要真正体悟这些文化，共通且本质的一点是初心。两者差异的在于，自由少了枷锁，没有道德的约束。</p><p>我们应寻找到自己心之所向的东西，并为之守望。不论是心系天下为天下立命，还是钟情山水如琢如磨，或是自由随风任意而东，都需这样近乎“道”式的初心，才不至于矫揉造作，南辕北辙。不论是意气用事还是意利用事，都把初心放在了一边，我们的守望应当是郑重而坚定的。不信你看，雅典的自由处死了苏格拉底，东汉的仁义逼死了李固，以上算是自由吗？顺应自然吗？是否真的契合那颗清澈的初心呢？</p><p>我们应当从儒道文化中意识到这一点，才不枉圣贤们含泪的一生。各人的初心具体不一，但不谋而合的是，他们都有着热爱梦想，不为名利所顾忌的正义的愿景阿！那颗正能量的心是生活的底线，没有底线，就没有儒道，没有自由。一颗不能殉道，委屈求全的心，岂能被称之为初心？</p><p>说到底，不过是一颗向往美好，执着于美好的心罢了。“若君肯惜顾，落泥也胜妆”，不过如此。有心如斯，心系天下是君子，心在江湖是圣人，向住自由是英雄，任儒任道也殊途同归了。</p><p>被儒道统治的时代已彻底逝去，我们向往出门，并且必须出门，但临行前一定要看一看这个家，牢记先贤的叮嘱，出门便是一场远征。</p><p>“偶尔走失，从未离开。没有比生活更古老的过去，也没有比生活更高远的未来。无论经历多少波折，困苦与残酷，人们对美好生活的追寻，亘古如新。”</p><p>以生活的名义，我以我心拥自由，愿称之为我的儒道。</p><p><img src="/post_picture/11-1.jpg" alt="图1"><br><img src="/post_picture/11-2.jpg" alt="图2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、儒道背后的枷锁：为了一颗初心&lt;/p&gt;
&lt;p&gt;儒道两家是差异的，亦是互补的，在我看来，打个不恰当的比方，即道家让我们一生不出门，顶多为生计所迫到门口集市买点生活必需品，因为外面太肮脏而我们无以抵御。儒家倡导我们出门，但一定要在已知的世界添砖加瓦，开拓新世界是万万不可取的，</summary>
      
    
    
    
    <category term="个人随想" scheme="http://ryan6073.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="随笔" scheme="http://ryan6073.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>绵延千年的爱恨</title>
    <link href="http://ryan6073.github.io/2023/03/05/%E7%BB%B5%E5%BB%B6%E5%8D%83%E5%B9%B4%E7%9A%84%E7%88%B1%E6%81%A8/"/>
    <id>http://ryan6073.github.io/2023/03/05/%E7%BB%B5%E5%BB%B6%E5%8D%83%E5%B9%B4%E7%9A%84%E7%88%B1%E6%81%A8/</id>
    <published>2023-03-05T15:09:57.000Z</published>
    <updated>2023-03-05T15:21:19.710Z</updated>
    
    <content type="html"><![CDATA[<p>归去来兮，归去来兮，“田园将芜胡不归”，自此，我知道你并不是一个清心寡欲的田园诗人，而是天底下最烂漫的男人。</p><p>世人皆说你是高尚的隐土，而我独说你是钟情的爱人。</p><p>田园将芜，你有多久没有回家看过深爱着你的人了，谁为你盈的一樽酒，谁为你候的一扇门，等了多少年，等到岁月荣枯了土地，庄稼老去，杂草丛生，胡不归，不归为之亦不追。最后又是多少年，“带月荷锄归”。你本不愿闲云野鹤，只是爱而不得。</p><p>你魂牵梦绕之处，是那金鸾殿中锦衣玉食的男人。浊酒悠悠，江湖遨游。山水田园不是你的故乡，你心之所向，是做他的香草美人，为他明航。</p><p>“既窈窕以寻壑，亦崎岖而经丘”。你在偏远的他乡流浪，他在你的故乡一梦千年。你在他不知道的地方忧思仲仲，他在你忧思忡忡的地方歌舞升平。心若没有栖息的地方，到哪都是流浪。你有所欲栖，却不得栖之。跨越千山的你，跋涉万水的你，穿越人山人海的你，没能和他一起。</p><p>云气逸出重峦，鸟儿飞倦了就知道回巢。黄昏逐着地平线离去，抚摩着孤独的劲松，辗转徘徊的你爱过了，恨过了，无奈了，于是回到了家乡。你无数次告诉世人说你“误落尘网中，一去三十年。羁鸟恋旧林，池鱼思故渊。”想家了，要回到最开始的地方。但为何荣辱归隐，恩怨了断的你，归去来兮，却掩不住音容笑貌后“请息交以绝游”的哀伤，一种撕裂般的落寞。</p><p>你是钟情于他的爱人，为爱固执了大半生。而命运最残忍的地方，不在于使你与某个人分离，而在于它使你与某人分离，破灭某段幻想，淡漠某段感情后，却使你清晰记得曾那样爱过、幻想过、深沉过。</p><p>没有他的人生，春风十里也迢迢。你能给他所有的想要，却不料你给的爱他不要。贤臣难遇明君，正如这世上一厢情愿很多，而两情相悦却很少。而你最后认了这个不公的命，“已矣乎！寓形宇内复几时？曷不委心任去留？胡为乎遑遑欲何之？”“聊乘化以归尽，乐夫天命复奚疑！”你终于顺遂了天命，安天乐命，做那山水之间的一楼风，一捧土，自在人间，不问世事。</p><p>由是，世人谓你为山水田园诗人，隐逸超然，傲然自足，而你清楚，故事木不该如此。你本不该被历史简单地铭记，成为山水田园的那部分；你本不该被岁月模糊，成为浑身静穆的一个。尽管你开辟了一方净土，与山水草木相亲，为每个不被爱的士人提供了究极的归宿。</p><p>你更应是一个金刚怒目的人，登东皋以舒啸，“临清流而赋诗”。在东边的高冈上长啸，郁结于心的爱而不得的愁苦自你胸膛排山倒海般涌出，尽管只有山林与你遥遥呼应。溪边赋诗，斟酌情思，复返自然，黯然伤神，他不知。</p><p>这样的你，棱角分明，清澈如少年模样。仿佛不再是那个高高在上的诗歌大家，而是我们每个人自己。渺小的伟大的，奋斗着也想放弃着的自己。</p><p>爱恨绵延千年，我们依然在覆蹈着前人的辙迹。绵延千年的爱恨，从帝王将相，到痴男怨女，人设不断改变，本质恒久不变。千年来各种人的选择不尽相同，但我坚信诸法皆为爱，而你当然是其中璀璨的一个。</p><p>那彼岸的花开，千年来年年盛开，年年如初开般灿烂。</p><p><img src="/post_picture/10-1.jpeg" alt="图1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;归去来兮，归去来兮，“田园将芜胡不归”，自此，我知道你并不是一个清心寡欲的田园诗人，而是天底下最烂漫的男人。&lt;/p&gt;
&lt;p&gt;世人皆说你是高尚的隐土，而我独说你是钟情的爱人。&lt;/p&gt;
&lt;p&gt;田园将芜，你有多久没有回家看过深爱着你的人了，谁为你盈的一樽酒，谁为你候的一扇门，等了</summary>
      
    
    
    
    <category term="book" scheme="http://ryan6073.github.io/categories/book/"/>
    
    
    <category term="归去来兮辞" scheme="http://ryan6073.github.io/tags/%E5%BD%92%E5%8E%BB%E6%9D%A5%E5%85%AE%E8%BE%9E/"/>
    
  </entry>
  
  <entry>
    <title>侠客的风骨</title>
    <link href="http://ryan6073.github.io/2023/03/05/%E4%BE%A0%E5%AE%A2%E7%9A%84%E9%A3%8E%E9%AA%A8/"/>
    <id>http://ryan6073.github.io/2023/03/05/%E4%BE%A0%E5%AE%A2%E7%9A%84%E9%A3%8E%E9%AA%A8/</id>
    <published>2023-03-05T14:23:35.000Z</published>
    <updated>2023-03-05T15:05:33.754Z</updated>
    
    <content type="html"><![CDATA[<p>偷偷告诉你，我是潜伏在华夏的侠客之一，“十步杀一人，千里不留行”。</p><p>一、侠客的梦幻开局  </p><p>天下英雄出我辈，长剑一指动惊雷。<br>苍穹疾星映鹤羽，明铛双绝照夜辉。<br>渺云汉，拥千山，松涛洗惫。<br>扬白帆，观沧海，潮声似醉。<br>谁将百代功过，妙笔来绘？<br>负手笑傲领千秋江月，一尊还酹。<br>共你我此生无悔，一尊还酹！</p><p>这首诗，或许完美展现了侠客这一人物群像在我心中的梦幻开局（遗憾的是未找到出处），正是“飞雪连天射白鹿，笑书神侠倚碧鸳”。甚至还不够贴切，更类似于现代仙侠般的毁天灭地，动辄便山崩海啸。揽一佳人于怀，笑看苍穹，无所不能，而行侠仗义，更是轻而易举，弹指一挥间，便是一片新天地。那时候，天空一定是蓝的，云朵一定是洁白的，正如侠客一般一定是正义的，随时可以大济苍生。</p><p>“相与信为任，同是非为侠。所谓‘权行州里，力折公侯’者也。”多么豪迈的话语，我更随时等待着像段誉一样开启传奇人生。就是在这样的幻梦中，我开始真正睁眼看世界，却发现少林寺的高人们并没有在九州大陆上纵横捭阖，李小龙、成龙这样的武术“龙”也只能在电影里铲奸除恶。我慢慢意识到，这也许只是一个美丽的绮梦，和那些超兽武装别无两样。还记得皮皮老师曾经表示很好奇男生是怎么成长的，我想，或许有相当一部分都是像我这样长大的吧，有着形如武侠般的超级英雄式的幻想，然后慢慢长大，伴随着幻梦的破灭。</p><p>二、剑未佩妥，出门已是江湖</p><p>《七剑下天山》·八声甘州<br>笑江湖浪迹十年游，空负少年头。对铜驼巷陌，吟情渺渺，心事悠悠。酒醒诗残梦断，南国正清秋。把剑凄然望，无处招归舟。<br>明日天涯路远，问谁留楚佩，弄影中州？数英雄儿女，俯仰古今愁。难消受灯昏罗帐，怅昙花一现恨难休，飘零惯，金戈铁马，拼葬荒丘。</p><p>这是武侠名家梁羽生的诗词，算是真正意义上初识侠客的我对侠客的感同身受，这次我系统认真的把几部武侠小说看了一次，发现侠客武功虽强，但依然受着和现实无俩的制约。确实比现实要诗意很多，生活确实佳人在侧，兄弟生死与共，却亦有着主角的无奈与局限，甚至比现实中的个人表现的更为深刻（这不是废话吗，小说的艺术就是这样啊）。</p><p>于是我想，武侠已死，自己也活成了路人，自己和悲情的武侠有着不相上下的苦逼，却没有那么波澜壮阔的人生，未来仿佛已经定下了主调，早出晚归，为着生活而苟且着。像是极力想表现出rap的嘻哈风格时只能憋出一段陈述，“淡黄的长裙，蓬松的头发”。</p><p>“新丰美酒斗十千，咸阳游侠多少年。相逢意气为君饮，系马高楼垂柳边。”这可以实现吗，答案显然是否定的。于是我萌发了出这期专栏的想法，想借小说隐喻一下自己的牢骚（显然现在这一切都背道而驰了)，大意是自己梦中的侠客向生而死，最后倒在了血泊中，结果确有其人，并且自己苦恋的女孩就喜欢那个侠客。</p><p>“一年后，他衣锦还乡，决定去寻那个喜欢侠客的女孩。</p><p>隆冬时分，一行足迹蜿蜒到那女孩曾住的家中。</p><p>他带着一身荣耀来寻故人，然而故人已去。</p><p>那漫天星辰遥望的一点，不再等着那个爱看星辰的人。”</p><p>我截取了这一段，可见当时的我多么颓唐啊，我爱梦想，梦想却不爱我，而爱上了幻想——侠客。现在看来这也不过就是成长，什么狂拽炫酷吊炸天是不可期实现的。不过就是还没佩好剑，就出了门，然后一个高手也没看见，就以为江湖已经干了，殊不知自己本应死了几百遍，只不过侠客也不会在普通人前亮剑啊。</p><p>后来我在搜篇首的无名诗时，发现正版的原来是金庸这首《江湖行》：</p><p>天下风云出我辈，一入江湖岁月催。<br>皇图霸业谈笑中，不胜人生一扬醉。<br>提剑跨骑辉鬼雨，白骨如山鸟惊飞。<br>尘事如潮人如水，只叹江湖几人回。</p><p>多少有些唏嘘，原来武侠界的登峰造极者金庸也是如此。原来天空也不一定是蓝的，也有雾霾，而云朵也有乌云，侠客也是普通人。提剑江湖时你我皆少年，，结果“一入江湖岁月催”，又有几人能葆有梦想呢？<br>前路漫漫，刀光剑影，侠客们仗剑而行，饮马江湖。自此一人一马一江湖，回首莫欺少年时。</p><p>三、书生的江湖梦：侠骨两昆仑<br>故事并没有结束，事实上，我对侠客的思考并没有停止，而是更加扩散了。这时便是哲学的一句话“存在即是合理”。武侠存在的理由是什么，为何这一人物群像代代相传？</p><p>古龙先生曾说过有人的地方就有江湖，有江湖的地方就有人，有江湖的地方就有武侠。反过来说有人的地方就有武侠。说明武侠存在于各人心中。这时正确行使我的最高权力（对式侠的定义权）将其定位于笔下功夫，就很好理解了。大家（金庸）都说武侠是成年人的童话，这让我想起了《小王子》（也是给成年人读的童话），这时就很清晰了，小王子和侠客，刨去东西方文化的风格不同。其实都是那个心里面的顽固小孩子啊，只不过一个那么正义，一个那么天真。“若提本非树，明镜亦非台”，现代的对侠的改编，反面使得侠这一人物形象失去了原有的光彩和意义，我想这也是近年来武侠小说没落的原因之一吧。</p><p>武侠，就是一种风骨的人格化。无关风月，而是来自不得志的生活。侠骨铮铮，并非单纯的人前光鲜，更不同于平凡的人后苦楚，而是这两者的纯粹结合，纯粹如此以至于掺不得半点利害，只会和正义的小朋友一起守望心中的执著，永不消弭。看看武侠。就明朗了一段黑暗的长路。其存在的意义也正是用于承载“此剑抚平天下不平事，此心无愧天下有愧人”这样的意愿吧。</p><p>至于梦想，这年头，梦想跟江湖一样虚妄，但总有人还想抓这些虚妄（比如我）。</p><p>终究还是要知道自己想要什么，明白这一点，就有江湖，有梦想，有侠气。</p><p>不禁让我联想到rap(怎么又是)，我分享一首 rap神曲（江湖流）的歌河“整个江湖都任我闯&#x2F;我的生命像一首歌”。听，正是这种豪迈的感觉啊。</p><p>再借用一段知乎上某评论的原话：</p><p>“而你之所以能千金散尽，一醉累月轻王侯，那定然是有更执着的泡负，好比你爱上个豪门千金，她妈甩给你一百万，你说不要。</p><p>她妈甩给你一千万，你顺手又送回了心爱的姑娘。</p><p>这就很江湖。</p><p>除去我胸中抱负与眼前美人，余者皆不足论。</p><p>什么是江湖，江湖是心安的归处，是理想乡，是快意恩仇最后的所在。</p><p>你剥离开眼前的一切，活得简单一些，你就到了江湖。</p><p>彼时你能在业内一剑西来，也能在人前精神病患，美人巧笑倩兮，你说那有多好？</p><p>名利权位，那都是追不来的，江湖人自有江湖人的风骨，你这一茫然，那就丢了风骨。</p><p>当长歌饮酒，对月一笑，我知何所来，我知何所去，酒壶一抛，遍地江湖。”</p><p>这时候天蓝云白，看山还是山，却已是另一番气象了。</p><p>码完字的我，心中的侠气便是能畅所欲言（当然不是快人快语)，作为一介书生，最大的侠骨，莫过于让笔下的字句，个个磊落大丈夫，可以“去留肝胆两昆仑”。</p><p>“自此便深深懂得，何谓侠者，便无身份之分。可以作隐士，亦可作谋臣：可以是将才，亦可是文人无所谓身份，不在乎地位。待得夕阳西下，回首萧瑟门庭，一砚冰雪冻住寒梅，便正如那些青史里耀眼的侠客，在彻骨的冰寒里也宁折不弯，一身傲骨，系着一颗丹心。”</p><p><img src="/post_picture/9-1.jpeg" alt="图1"><br><img src="/post_picture/9-2.jpeg" alt="图2"><br><img src="/post_picture/9-3.jpeg" alt="图3"><br><img src="/post_picture/9-4.jpg" alt="目录"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;偷偷告诉你，我是潜伏在华夏的侠客之一，“十步杀一人，千里不留行”。&lt;/p&gt;
&lt;p&gt;一、侠客的梦幻开局  &lt;/p&gt;
&lt;p&gt;天下英雄出我辈，长剑一指动惊雷。&lt;br&gt;苍穹疾星映鹤羽，明铛双绝照夜辉。&lt;br&gt;渺云汉，拥千山，松涛洗惫。&lt;br&gt;扬白帆，观沧海，潮声似醉。&lt;br&gt;谁将百</summary>
      
    
    
    
    <category term="个人随想" scheme="http://ryan6073.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="随笔" scheme="http://ryan6073.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>郡园情史</title>
    <link href="http://ryan6073.github.io/2023/03/05/%E9%83%A1%E5%9B%AD%E6%83%85%E5%8F%B2/"/>
    <id>http://ryan6073.github.io/2023/03/05/%E9%83%A1%E5%9B%AD%E6%83%85%E5%8F%B2/</id>
    <published>2023-03-05T14:07:47.000Z</published>
    <updated>2023-03-05T14:16:58.781Z</updated>
    
    <content type="html"><![CDATA[<p>郡园澄池水渐渐被大地染黄，大地温暖暮色一直漫延到天边，推开窗静静看枫树调谢了秋红，一点一点零落仿佛枫红与秋永不会分离，每当看见你，就像另一个自己。</p><p>三峡石上，韩玄墓旁，澄池之畔，可曾见过你？</p><p>倘若不曾，又从何解释，物质跨越百万光年来到这里，使我因缘际会，辗转千里，来到异地他乡的你，却如同故人归来，梦里的吾乡。我和你，没有“君问归期未有期，巴山夜雨涨秋池”的思念，没有“在天愿做比翼鸟，在地愿为连理枝”的缠绵，却有如清风朗月，辄思玄度。</p><p>当一觉醒来，我想起了你。阳光洒满柏油路，落叶垫在脚尖，踩着叶的脉络我大步向前。教室里又是谁在少壮努力，我在圣贤前，凝视定律的字眼，心却飘到窗外静静欣赏你那我深爱的轮廓。运球、投球、打饭、吃饭，是谁的青春，喜欢一个人走时你是我的郡园，沿着右行道漫步，你我并肩带有青春的味道，阳光或阴影从脸到温暖的树梢。</p><p>倘若不是你我，故事本不必如此简单。从寝室到桌前，从球场到餐厅，从林荫到阳光，一切问题的答案都很简单。</p><p>我爱你谈笑有鸿儒，更爱你潭水深千尺。昔我恩师皮皮老师，思接千古，以情论理，教化了我多少课：故我至交小彭同学，穿林打叶，磕磕绊绊，陪伴了我多少天。今我尊师朱亮老师，旁征博引，思量深刻，文评精妙，唯余仰慕：现我好友阿年同学南门闯荡，游走江湖，少年不老，长歌徐行。学富五车在你，不舍昼夜在你，十分感谢你，让我生命的夜空里出现这些流星般璀璨的美好。你使我卑微到尘埃里，然后垂眼发现自己已在天空的国度。春风是你，柳絮是你池面的窗花；夏蝉是你，叶尖是你温暖的阳光：秋水是你，细雨是你晨曦的天空：冬雪是你，皑皑是你轻盈的新装。这郡园点滴，都是你。吹拂进风里，溶解进水里，散落在生命里，熠熠生辉。该怎样形容你一一我的郡园，你的悠久你的亲切，你的宁静你的灵动，我要的不过是一方净土，你却给了我一世界的光明。</p><p>我希望有个如你一般的人，如澄池之畔吟赏郡园一般的人，如韩玄墓旁不离不弃一般的人，如三峡石上长风破浪一般的人，从花开到花落，翻遍生命的教材。</p><p>十年寒窗，百年长郡：千载中华，万古文明。处在远古蛮荒的尧舜禹，他们在没有史书记载的神话时代成为了神话。而处在传奇郡园的我，也因你而成为了一个传奇。前人用史书记载王朝腥风血雨、刀剑恩仇，而今让我为你续一段情史，写一篇名传，它没那么生动，只因你我间故事简单，如此甚好。</p><p>在这普天同庆的日子里，我想告诉你：和你一起，我深感荣幸。</p><p>谨以此祝我的郡一百一十五岁生日快乐！幸好，信封已到，收信人尚在，少年待发，阳光正好。</p><p><img src="/post_picture/8-1.jpeg" alt="图1"><br><img src="/post_picture/8-2.jpeg" alt="图2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;郡园澄池水渐渐被大地染黄，大地温暖暮色一直漫延到天边，推开窗静静看枫树调谢了秋红，一点一点零落仿佛枫红与秋永不会分离，每当看见你，就像另一个自己。&lt;/p&gt;
&lt;p&gt;三峡石上，韩玄墓旁，澄池之畔，可曾见过你？&lt;/p&gt;
&lt;p&gt;倘若不曾，又从何解释，物质跨越百万光年来到这里，使我因</summary>
      
    
    
    
    <category term="个人随想" scheme="http://ryan6073.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="抒情随笔" scheme="http://ryan6073.github.io/tags/%E6%8A%92%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>烟雨深葬</title>
    <link href="http://ryan6073.github.io/2023/03/05/%E7%83%9F%E9%9B%A8%E6%B7%B1%E8%91%AC/"/>
    <id>http://ryan6073.github.io/2023/03/05/%E7%83%9F%E9%9B%A8%E6%B7%B1%E8%91%AC/</id>
    <published>2023-03-05T13:47:12.000Z</published>
    <updated>2023-03-05T14:03:36.335Z</updated>
    
    <content type="html"><![CDATA[<p>长年异地读书，清明时节，于我而言，并不意味着缅怀祖先，祭扫陵墓，而是意味着怀想那些逝去的东西，比如调谢的桃花，比如经年的爱情，比如逝去的友情。</p><p>“人面不知何处去，桃花依旧笑春风。”</p><p>三月，三个三月，共度的三年青春里，似平每逢桃天，他都要和我讲讲这个崔护的故事：</p><p>青年崔护考场落第，清明日独游长安城南，见一村庄，花木繁茂。在一小院门前，崔护叩门求饮，一女子开门，捧水相待。第二年，崔护再去南庄相访，只见门已上锁，不见丽人，遂于门上题了这首诗。几天以后，崔护再度往寻，闻屋内有哭声，即门求问，方知女子因思念题诗的人而郁郁死去。崔护入门，扶而哭之，连呼“崔护在此”！女子竞然睁开了双眼，死而复生。于是，女子的父亲便将她嫁给了崔护。</p><p>他总说，这个故事告诉我们：要及时爱，大胆爱，勇敢去追，不然就会错过。</p><p>春风依旧，桃花依旧，只是未料，曾经的告诚最终仍是一语成谶。</p><p>这个清明未“雨纷纷”，而思绪成丝，牵引着我漫潮记忆，恍惚回到过去，回到人面桃花的起点。</p><p>湿润的春风卷起无边细雨在大地上兜转，他惊讶地告诉我：“看，桃花开了啊！”同为“窗友”的我拾起了头，戏谑道：“哟，你还有这情趣，看不出来嘛。”此日者，清明也。大多数人都回家扫墓了，教室中似平只剩下了我和他，一个白净的“小厮”。他一反常态没有满教室追着我打，而是叹了一口气，说了一番我至今言犹在耳的话语：</p><p>“‘人面不知何处去，桃花依旧笑春风’。曾和我一起看桃花的女孩，已有一年未见了。”一直好奇为什么他一个仅仅读初一的学生就说出如此深刻的话语，后来才了解，一是其用情确深，二是玄幻武侠小说看多了，便拥有了一些倜傥的侠气。自此，我慢慢走进了他的过去，而他也缓缓了解了我的曾经。</p><p>他暗恋一个女孩数年，却不敢表白，因为那孩于他而言是一颗星辰，是一种可望不可即的遥远。</p><p>深深地了解了彼此，而我们依旧是一对损友，我很狂，他也很狂，两个很狂的人做朋友是难以惺惺相惜的一总是要错过，才知珍贵。</p><p>他嘲笑我没有回海南见初恋的决心，我讥讽他没有向暗恋的女孩表白的勇气，这些青涩的情事，不想以后竟一一成为遗憾，溶解在雨里，弥散在风里，凋落进了盛开的桃花里，成为每次桃花盛开的殇。</p><p>用他的话来讲，就是我们要先遍览群书，比崔护更快地充实自我，然后在相思的少女相思最重的那天，驾马归来，请姑娘执手白头，还她一世繁花。</p><p>我信了他的邪，和他一起写意淫的情书，写诗，让自己感觉更有逼格。</p><p>我们就这样疯疯癫癫地过了一学期，去步行街吃小吃，为将来和女票逛街做准备；一起写中二的档案，记录校园中颜值高的女生及追法，为提高撩妹能力作铺垫；日日厮混在一起，分享关乎爱情的风雅趣事。</p><p>而桃花那三月的桃，自开了第一朵，便陆续盛开了，却一定要到花满枝桠，才会忍不住朵朵凋落。</p><p>还未到初二年级的桃花盛开之际，某日的上午，他便云淡风轻地和我说他删了好友一那个他暗恋的女孩。脸上很坦然，但我知道他有多痛，只是其中的缘由他至今都未告诉我。之后，他便和我有所疏离，一个人的时候多了，忧伤的时候多了，脸上的肥肉抖得少了。</p><p>也还未过多久吧，就在寒假结束之际，我的异地恋亦宣告破产，人生中第一个情侣空间成了空白。他的QQ签名也更改成了：“你应该是一场梦，我应该是一阵风。”而我亦换了一个口头禅：“世间安得双全法，不负如来不负卿。”</p><p>骑士还未凯旋，女孩便已离开，等到大雪中找到了那个故乡，才知道故人已去。</p><p>我们还是一样臭味相投：爱看小说，爱看漫画，爱看美女。一样课间鬼混着，却浑浑噩噩感觉没了当初的豪情满怀。</p><p>应该亦是自那时起，我的内心住下了一个内向的小孩。我想扎西拉姆一定是骗人的，斯人没有给我诗情，却给了我悲伤。</p><p>彼此仿佛真的开始成了损友，每日有互怼，大多围绕着他的雀斑和我的大额头说事。可能只有这样才能弥补心中的一个洞吧，那个敏感又骄做的地方。</p><p>记得那年的清明，雨后天晴，我和他漫步校园，畅聊妹子，畅聊小说，一起描述夕阳，一圈又一圈，仿佛时间静止，仿佛过往成烟。</p><p>“还记得崔护的那个故事吗？”</p><p>“记得啊，‘人面不知何处去，桃花依旧笑春风’嘛。”</p><p>“我问你，你是不是真的喜欢XX?”</p><p>支吾着，其中的一个人说不出话。</p><p>“喜欢就追吧，过去的也该过去，我可以帮你改情书。”</p><p>那个人沉默了，因为他深深明白，另一个人也对XX有所好感，毕竟XX是那么体贴，足以抚慰两人的殇。</p><p>谁是谁并不重要，也许两人都是。重要的是，这应该是我和他最后一次面对面坦诚地，真挚地聊天了。</p><p>雨后的桃花花瓣上沾着雨露，后来我想，那也许是桃花哭了呢。</p><p>变化是如此之快，以至于我还来不及帮上你一把，你就独自一人，承受一整个黑夜的哀伤。</p><p>“XXX同学的父亲因突发心脏病而去世了…”班主任悲痛道。</p><p>我如遭雷劈，却只是哽咽得说不出话。</p><p>奔丧回来后的你，变化是那般大，以至于我竞找不到一个机会安慰你，亦或说点别的。过了好一阵子之后你才开始与人讲话，与我玩笑，却只是玩笑，我从你细缝般的眼里，看不到眼底的澄澈，亦或悲伤。</p><p>没什么办法与你谈心，又是一年清明，我终于决定，要以写情书的形式向你表白。</p><p>“你当然是我的好朋友啦.但挚友我没有挚友。这就是·昔年旧友，不复当时默契”啊。最后竞还是·人面不知何处去，桃花依旧笑春风’。”</p><p>烟火迷离何如许，灯辉摇曳无愿与。烛花似剪似伊心，雕笔若诛若卿荑。</p><p>泪痕零落又流年，执笔画卷唯泼墨。相清不沫存遗恨，泉调梧栖风不逢。</p><p>彼此昔日的唱和还素绕在耳边，我却忘不了那个遗悠：初三年级的三月，我们没有一起看桃花。</p><p>“桃之天天，灼灼其华。之子于归，宜其室家。”</p><p>桃花见证了我们的相遇，亦见证了我们的离别三月桃天应回首，只记花开不记年。“去年今日此门中，人面桃花相映红。人面不知何处去，桃花依旧笑春风。”</p><p>又是一季桃花开，花开在眼前，已经开了多遍，我们一起走过了从前：花开在眼前，我整天泪流满面，像个不解风情的少年。</p><p>三月桃夭，最是美，美至绝，惹人泪。</p><p>故人隐去晚莫寻，斯园足迹已飘散。不若就此烟雨中，深弊江南桃夭忆。<br><img src="/post_picture/7-1.jpeg" alt="图1"><br><img src="/post_picture/7-2.jpeg" alt="图2"><br><img src="/post_picture/7-3.jpeg" alt="图3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;长年异地读书，清明时节，于我而言，并不意味着缅怀祖先，祭扫陵墓，而是意味着怀想那些逝去的东西，比如调谢的桃花，比如经年的爱情，比如逝去的友情。&lt;/p&gt;
&lt;p&gt;“人面不知何处去，桃花依旧笑春风。”&lt;/p&gt;
&lt;p&gt;三月，三个三月，共度的三年青春里，似平每逢桃天，他都要和我讲讲这</summary>
      
    
    
    
    <category term="个人随想" scheme="http://ryan6073.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="轻小说" scheme="http://ryan6073.github.io/tags/%E8%BD%BB%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>Find joy in our life | 《遗愿清单》</title>
    <link href="http://ryan6073.github.io/2023/03/05/Find-joy-in-our-life-%E3%80%8A%E9%81%97%E6%84%BF%E6%B8%85%E5%8D%95%E3%80%8B/"/>
    <id>http://ryan6073.github.io/2023/03/05/Find-joy-in-our-life-%E3%80%8A%E9%81%97%E6%84%BF%E6%B8%85%E5%8D%95%E3%80%8B/</id>
    <published>2023-03-05T07:46:45.000Z</published>
    <updated>2023-03-05T08:20:11.870Z</updated>
    
    <content type="html"><![CDATA[<p>”Our lives are streams flowing into the same river towards whatever heaven lies in the mist beyond the falls.”</p><p>这是卡特写给爱德华的遗言中的一句，最后的遗愿，他通过遗言的形式和爱德华一起实现了。这样的结局实在是悲伤，却也太过于完美以至于我心中的喟叹久久不能平息，至此的时候，卡特其实已经完成了他最想完成的遗愿，但是他心知爱德华还没有解开自己最后的心结，所以卡特在犹豫中还是将这封遗言转交给了爱德华，卡特也知道他的离去，是最后能够打动爱德华去与女儿见面解开心结的契机，所以一切似乎那么悲伤，却又恰到好处，任何一个变化都会使得这样的结局不再完美，哪怕是他们中有人活了下来，都会降低这部电影结局的艺术价值，也许这也算是悲剧艺术的魅力。</p><p>我会想写一些话，算是记录，也算是希望这些话可以让更多的人看到，美好的艺术永远值得分享和传递。</p><p>在人生的旅途中，我们常常因为追求更好的东西、更多的钱、更高的地位而忽略了自己内心真正的诉求，人死后其实什么也带不走，我们努力生活、努力学习和工作，其实都是没有错的，爱德华白手起家，卡特放弃自己的梦想选择了家庭，他们都没有错，甚至如果说卡特坚定自己的梦想，选择了继续深造，也不算错，他们两个可以说是性格不同，命运中十字路口处的抉择也不同，最后一个大富大贵却茕茕孑立，一个担起家庭却埋没了梦想，在我们抓住某些东西的时候，注定就丢掉了一些东西，人生就像一个人在沙漠中独行，体力有限、承重有限、眼界有限、生命有限，这都是不可避免的，我们不可避免会犯错，不可避免会患得患失，不可避免会老去，就像电影中的爱德华和卡特一样，但是我们需要知道自己想做什么，并且不要让自己抱憾终生。<br>生活却不是电影，即使是电影，最后一条遗愿也是爱德华通过钞能力让他人代为实现的，因此我更想说的是，也许你正值青年、中年或者老年，但是都不要觉得为时过早或者为时过晚，因为所想的最佳所做时机就是计划中，在现在或者不久的将来，我们需要调动身体的能量，在这个清单上时刻增减，不要只减不增或者只增不减。这也许也算是人生的一部分意义，我们时刻在做对于我们生命有意义的事情，每一件事情都给我们的生命拓展了宽度，延伸了深度。我也希望我们的清单不会叫做遗愿清单，而是人生清单，因为这样深刻的道理如果是以死亡为契机才被领悟到，那也未免太过于可惜了。</p><p>所以，如果你对我说的话有一定情绪反应，那么请你去看看这部电影，我相信它会给你想要的答案。</p><p>Even as the eyes are closing ,do it with a heart open,a wide heart say what you need to say.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;”Our lives are streams flowing into the same river towards whatever heaven lies in the mist beyond the falls.”&lt;/p&gt;
&lt;p&gt;这是卡特写给爱德华的遗言中的一句，最后</summary>
      
    
    
    
    <category term="movie" scheme="http://ryan6073.github.io/categories/movie/"/>
    
    
    <category term="遗愿清单" scheme="http://ryan6073.github.io/tags/%E9%81%97%E6%84%BF%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>爬虫爬取豆瓣书单</title>
    <link href="http://ryan6073.github.io/2023/01/17/%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E4%B9%A6%E5%8D%95/"/>
    <id>http://ryan6073.github.io/2023/01/17/%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E4%B9%A6%E5%8D%95/</id>
    <published>2023-01-17T15:01:33.000Z</published>
    <updated>2023-03-05T07:48:43.313Z</updated>
    
    <content type="html"><![CDATA[<p>我用了python爬虫中很有名的第三方库beautiful soup库来完成爬取，而这一代码其实是改进了简书上一位博主的代码，他的代码是16年的，其中有很多东西放到现在已经需要改动，而最重要的爬取信息的方式还需要重写，我对这些问题进行了解决并优化了一些他的方法，于是总结在此。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">import pymysql</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_tag():</span><br><span class="line">    channel = []</span><br><span class="line">    headers = &#123;&#x27;User-Agent&#x27;: &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&quot;&#125;</span><br><span class="line">    # 利用request模块进行访问获取内容</span><br><span class="line">    url = &quot;https://book.douban.com/tag/?icn=index-nav&quot;</span><br><span class="line">    wb_data = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(wb_data.text, &quot;lxml&quot;)  # 解析网页信息</span><br><span class="line">    tags = soup.select(&quot;table.tagCol &gt; tbody &gt; tr &gt; td &gt; a&quot;)</span><br><span class="line">    # 根据CSS路径查找标签信息，CSS路径获取方法，右键-检查-copy selector，tags返回的是一个列表</span><br><span class="line">    for tag in tags:</span><br><span class="line">        tag = tag.get_text()  # 将列表中的每一个标签信息提取出来</span><br><span class="line">        helf = &quot;https://book.douban.com/tag/&quot;</span><br><span class="line">        # 观察一下豆瓣的网址，基本都是这部分加上标签信息，所以我们要组装网址，用于爬取标签详情页</span><br><span class="line">        url = helf + str(tag)</span><br><span class="line">        channel.append(url)  # 网址组装完毕，输出</span><br><span class="line">    return channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ceshi_price_one(detail):</span><br><span class="line">    price = detail.split(&quot;/&quot;, 4)[4].split()</span><br><span class="line">    if re.match(&quot;USD&quot;, price[0]):</span><br><span class="line">        price = float(price[1]) * 6</span><br><span class="line">    elif re.match(&quot;CNY&quot;, price[0]):</span><br><span class="line">        price = price[1]</span><br><span class="line">    elif re.match(&quot;\A$&quot;, price[0]):</span><br><span class="line">        price = float(price[1:len(price)]) * 6</span><br><span class="line">    else:</span><br><span class="line">        price = price[0]</span><br><span class="line"></span><br><span class="line">    return price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ceshi_price_two(detail):</span><br><span class="line">    price = detail.split(&quot;/&quot;, 3)[3].split()</span><br><span class="line">    if re.match(&quot;USD&quot;, price[0]):</span><br><span class="line">        price = float(price[1]) * 6</span><br><span class="line">    elif re.match(&quot;CNY&quot;, price[0]):</span><br><span class="line">        price = price[1]</span><br><span class="line">    elif re.match(&quot;\A$&quot;, price[0]):</span><br><span class="line">        price = float(price[1:len(price)]) * 6</span><br><span class="line">    else:</span><br><span class="line">        price = price[0]</span><br><span class="line">    return price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mains(url):</span><br><span class="line">    headers = &#123;&#x27;User-Agent&#x27;: &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&quot;&#125;</span><br><span class="line">    wb_data = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(wb_data.text.encode(&quot;utf-8&quot;), &quot;lxml&quot;)</span><br><span class="line">    tag = url.split(&quot;?&quot;)[0].split(&quot;/&quot;)[-1]</span><br><span class="line">    content_list = soup.select(&quot;#subject_list &gt; ul &gt; li&quot;)</span><br><span class="line">    titles = []</span><br><span class="line">    details = []</span><br><span class="line">    scores = []</span><br><span class="line">    persons = []</span><br><span class="line"></span><br><span class="line">    for lis in content_list:</span><br><span class="line">        title = lis.select(&quot;div.info &gt; h2 &gt; a&quot;)  # 书名</span><br><span class="line">        if title:</span><br><span class="line">            title = title[0].get_text().replace(&quot;\n&quot;, &#x27;&#x27;).replace(&quot; &quot;, &#x27;&#x27;).strip()</span><br><span class="line">        else:</span><br><span class="line">            title = &#x27;&#x27;</span><br><span class="line">        titles.append(title)</span><br><span class="line">        detail = lis.select(&quot;div.info &gt; div.pub&quot;)</span><br><span class="line">        if detail:</span><br><span class="line">            detail = detail[0].get_text().replace(&quot;\n&quot;, &#x27;&#x27;).replace(&quot; &quot;, &#x27;&#x27;).strip()</span><br><span class="line">        else:</span><br><span class="line">            detail = &#x27;&#x27;</span><br><span class="line">        details.append(detail)</span><br><span class="line">        score = lis.select(&quot;div.info &gt; div.star.clearfix &gt; span.rating_nums&quot;)</span><br><span class="line">        if score:</span><br><span class="line">            score = score[0].get_text().replace(&quot;\n&quot;, &#x27;&#x27;).replace(&quot; &quot;, &#x27;&#x27;).strip()</span><br><span class="line">        else:</span><br><span class="line">            score = &#x27;&#x27;</span><br><span class="line">        scores.append(score)</span><br><span class="line">        person = lis.select(&quot;div.info &gt; div.star.clearfix &gt; span.pl&quot;)  # 评价人数</span><br><span class="line">        if person:</span><br><span class="line">            person = person[0].get_text().replace(&quot;\n&quot;, &#x27;&#x27;).replace(&quot; &quot;, &#x27;&#x27;).strip().replace(&quot;人评价)&quot;, &quot;&quot;).replace(&quot;(&quot;,</span><br><span class="line">                                                                                                                    &quot;&quot;)</span><br><span class="line">        else:</span><br><span class="line">            person = &#x27;10&#x27;</span><br><span class="line">        persons.append(person)</span><br><span class="line"></span><br><span class="line">    for detail, score, person, title in zip(details, scores, persons, titles):</span><br><span class="line">        l = []  # 建一个列表，用于存放数据</span><br><span class="line">        try:</span><br><span class="line">            author = detail.split(&quot;/&quot;, 4)[0].split()[0]</span><br><span class="line">            translator = detail.split(&quot;/&quot;, 4)[1]</span><br><span class="line">            publish = detail.split(&quot;/&quot;, 4)[2]</span><br><span class="line">            time = detail.split(&quot;/&quot;, 4)[3].split()[0].split(&quot;-&quot;)[0]</span><br><span class="line">            price = ceshi_price_one(detail)</span><br><span class="line">            score = score if True else &quot;&quot;</span><br><span class="line">            title = title.split()[0]</span><br><span class="line">        except IndexError:</span><br><span class="line">            try:</span><br><span class="line">                author = detail.split(&quot;/&quot;, 3)[0].split()[0]</span><br><span class="line">                translator = &quot;&quot;</span><br><span class="line">                publish = detail.split(&quot;/&quot;, 3)[1]</span><br><span class="line">                time = detail.split(&quot;/&quot;, 3)[2].split()[0].split(&quot;-&quot;)[0]</span><br><span class="line">                price = ceshi_price_two(detail)</span><br><span class="line">                score = score if True else &quot;&quot;</span><br><span class="line">                title = title.split()[0]</span><br><span class="line">            except (IndexError, TypeError):</span><br><span class="line">                continue</span><br><span class="line">        except TypeError:</span><br><span class="line">            continue</span><br><span class="line">        l.append([title, score, author, price, time, publish, person, translator, tag])</span><br><span class="line">        print(l)</span><br><span class="line">        sql = &quot;INSERT INTO all_books values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;  # 这是一条sql插入语句</span><br><span class="line">        cur.executemany(sql, l)  # 执行sql语句，并用executemany()函数批量插入数据库中</span><br><span class="line">        conn.commit()  # 提交</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># mains(&quot;https://book.douban.com/tag/科技?start=0&amp;type=T&quot;)</span><br><span class="line"># 将Python连接到MySQL中的python数据库中</span><br><span class="line">conn = pymysql.connect(user=&quot;root&quot;, password=&quot;你的数据库user密码（不一定是root用户）&quot;, database=&quot;douban_db&quot;, charset=&#x27;utf8&#x27;)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(&#x27;DROP TABLE IF EXISTS all_books&#x27;)  # 如果数据库中有all_books的数据库则删除</span><br><span class="line">sql = &quot;&quot;&quot;CREATE TABLE all_books(</span><br><span class="line">        title CHAR(255) NOT NULL,</span><br><span class="line">        score CHAR(255),</span><br><span class="line">        author CHAR(255),</span><br><span class="line">        price CHAR(255),</span><br><span class="line">        time CHAR(255),</span><br><span class="line">        publish CHAR(255),</span><br><span class="line">        person CHAR(255),</span><br><span class="line">        translator CHAR(255),</span><br><span class="line">        tag CHAR(255)</span><br><span class="line"> )ENGINE = InnoDB DEFAULT CHARSET = utf8;&quot;&quot;&quot;</span><br><span class="line">cur.execute(sql)  # 执行sql语句，新建一个all_books的数据库</span><br><span class="line"></span><br><span class="line">start = time.process_time()</span><br><span class="line"># 设置一个时钟，这样我们就能知道我们爬取了多长时间了</span><br><span class="line">channel = get_tag()</span><br><span class="line">for urls in channel:</span><br><span class="line">    urlss = [urls + &quot;?start=&#123;&#125;&amp;type=T&quot;.format(str(i)) for i in range(0, 980, 20)]  # 从channel中提取url信息，并组装成每一页的链接</span><br><span class="line">    for url in urlss:</span><br><span class="line">        mains(url)  # 执行主函数，开始爬取</span><br><span class="line">        print(url)  # 输出要爬取的链接，这样我们就能知道爬到哪了，发生错误也好处理</span><br><span class="line">        time.sleep(int(format(random.randint(2, 5))))  # 设置一个随机数时间，每爬一个网页可以随机的停一段时间，防止IP被封</span><br><span class="line">end = time.process_time()</span><br><span class="line">print(&#x27;Time Usage:&#x27;, end - start)  # 爬取结束，输出爬取时间</span><br><span class="line">count = cur.execute(&#x27;select * from all_books&#x27;)</span><br><span class="line">print(&#x27;has %s record&#x27; % count)  # 输出爬取的总数目条数</span><br><span class="line"></span><br><span class="line"># 释放数据连接</span><br><span class="line">if cur:</span><br><span class="line">    cur.close()</span><br><span class="line">if conn:</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我用了python爬虫中很有名的第三方库beautiful soup库来完成爬取，而这一代码其实是改进了简书上一位博主的代码，他的代码是16年的，其中有很多东西放到现在已经需要改动，而最重要的爬取信息的方式还需要重写，我对这些问题进行了解决并优化了一些他的方法，于是总结在此</summary>
      
    
    
    
    <category term="Python" scheme="http://ryan6073.github.io/categories/Python/"/>
    
    
    <category term="豆瓣书单" scheme="http://ryan6073.github.io/tags/%E8%B1%86%E7%93%A3%E4%B9%A6%E5%8D%95/"/>
    
    <category term="爬虫" scheme="http://ryan6073.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之单链表以及改良</title>
    <link href="http://ryan6073.github.io/2023/01/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%89%AF/"/>
    <id>http://ryan6073.github.io/2023/01/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%89%AF/</id>
    <published>2023-01-17T09:25:04.000Z</published>
    <updated>2023-01-17T15:52:33.720Z</updated>
    
    <content type="html"><![CDATA[<p>在学完单链表后，我发现网上的代码大多是以C语言的面向过程的思想写就的，于是我想用C++面对对象的思想重新构建一下单链表类。经过对照所有能获取的资料，总结了一共两套代码，第一套是体现的基本的链表思想，第二套则尝试融入更多带有C++特性的东西。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;malloc.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxSize = 100;//设置链表最大尺寸</span><br><span class="line"></span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">class Single_Llist//单链表   </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">T data;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* next;</span><br><span class="line">explicit Node(Single_Llist&lt;T&gt;::Node* ptr = nullptr) :data(T&#123;&#125;), next(ptr) &#123;&#125;</span><br><span class="line">Node(const T&amp; item, Single_Llist&lt;T&gt;::Node* ptr = nullptr) :data(item), next(ptr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Single_Llist()//构造函数</span><br><span class="line">&#123;</span><br><span class="line">head = new Single_Llist&lt;T&gt;::Node;</span><br><span class="line">head-&gt;next = nullptr;</span><br><span class="line">tail = nullptr;</span><br><span class="line">&#125;</span><br><span class="line">Single_Llist(const Single_Llist&lt;T&gt;&amp; L);//拷贝构造函数 </span><br><span class="line"></span><br><span class="line">~Single_Llist()</span><br><span class="line">&#123;</span><br><span class="line">clear();</span><br><span class="line">&#125;</span><br><span class="line">void clear(); //清空链表</span><br><span class="line">size_t getSize() const;//返回链表长度</span><br><span class="line">typename Single_Llist&lt;T&gt;::Node* getHead() const &#123; return head; &#125;//返回头指针</span><br><span class="line">typename Single_Llist&lt;T&gt;::Node* getTail() const;//返回尾节点</span><br><span class="line">typename Single_Llist&lt;T&gt;::Node* getFirst() const &#123; return head-&gt;next; &#125;//返回第一个节点</span><br><span class="line">Single_Llist&lt;T&gt;* Search(const T&amp; x) const;//查找</span><br><span class="line">Single_Llist&lt;T&gt;* Locate(size_t i) const;//定位(第i个节点)</span><br><span class="line">bool getData(int i, T&amp; x) const;//取第i个节点的值</span><br><span class="line">bool setData(int i, const T&amp; x);//改变第i个节点的值</span><br><span class="line">bool Insert(int i, const T&amp; x);//在第i个节点前插入x(可以通过next域实现在结点后插入)</span><br><span class="line">bool Remove(int i, T&amp; x);//删除第i个节点</span><br><span class="line">bool IsEmpty() const</span><br><span class="line">&#123;</span><br><span class="line">return head-&gt;next == nullptr;</span><br><span class="line">&#125;</span><br><span class="line">bool IsFull() const &#123; return maxSize &lt;= getSize() ? true : false; &#125;</span><br><span class="line">void Sort();//  可以改进一下，归并排序</span><br><span class="line">void CreateList(T endTag);//前插法创建单链表</span><br><span class="line">void CreateList_byback(T endTag);//后插法创建单链表</span><br><span class="line">void print();//打印单链表</span><br><span class="line">void Merge(Single_Llist&lt;T&gt;&amp; LA, Single_Llist&lt;T&gt;&amp; LB);//归并两条单链表并有序排列（去除重复元素）,有点类似于构造函数</span><br><span class="line">Single_Llist&lt;T&gt;&amp; operator=(const Single_Llist&lt;T&gt;&amp; rhs);</span><br><span class="line">protected:</span><br><span class="line">Single_Llist&lt;T&gt;::Node* head;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* tail;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline Single_Llist&lt;T&gt;::Single_Llist(const Single_Llist&lt;T&gt;&amp; L)</span><br><span class="line">&#123;</span><br><span class="line">head = tail = new Single_Llist&lt;T&gt;::Node;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* desptr = head;</span><br><span class="line">T value;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* srcptr = L.getFirst();</span><br><span class="line">while (srcptr != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">value = srcptr-&gt;data;</span><br><span class="line">desptr-&gt;next = new Single_Llist&lt;T&gt;::Node(value);</span><br><span class="line">srcptr = srcptr-&gt;next;</span><br><span class="line">desptr = desptr-&gt;next;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">desptr-&gt;next = nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline Single_Llist&lt;T&gt;&amp; Single_Llist&lt;T&gt;::operator=(const Single_Llist&lt;T&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">head = tail = new Single_Llist&lt;T&gt;::Node;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* desptr = head;</span><br><span class="line">T value;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* srcptr = rhs.getFirst();</span><br><span class="line">while (srcptr != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">value = srcptr-&gt;data;</span><br><span class="line">desptr-&gt;next = new Single_Llist&lt;T&gt;::Node(value);</span><br><span class="line">srcptr = srcptr-&gt;next;</span><br><span class="line">desptr = desptr-&gt;next;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">desptr-&gt;next = nullptr;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::clear()</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* q = p-&gt;next;</span><br><span class="line">delete p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">head-&gt;next = nullptr;</span><br><span class="line">tail = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline size_t Single_Llist&lt;T&gt;::getSize() const</span><br><span class="line">&#123;</span><br><span class="line">size_t count = 0;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline typename Single_Llist&lt;T&gt;::Node* Single_Llist&lt;T&gt;::getTail() const</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p-&gt;next != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline Single_Llist&lt;T&gt;* Single_Llist&lt;T&gt;::Search(const T&amp; x) const</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">if (p-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline Single_Llist&lt;T&gt;* Single_Llist&lt;T&gt;::Locate(size_t i) const</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool Single_Llist&lt;T&gt;::getData(int i, T&amp; x) const</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">x = p-&gt;data;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool Single_Llist&lt;T&gt;::setData(int i, const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;data = x;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool Single_Llist&lt;T&gt;::Insert(int i, const T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* q = new Single_Llist&lt;T&gt;::Node;</span><br><span class="line">q-&gt;data = x;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline bool Single_Llist&lt;T&gt;::Remove(int i, T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head;</span><br><span class="line">size_t count = 0;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == i)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* q = p-&gt;next;</span><br><span class="line">x = q-&gt;data;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">delete q;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::Sort()</span><br><span class="line">&#123;</span><br><span class="line">int flag = 0;</span><br><span class="line">while (flag == 0)</span><br><span class="line">&#123;</span><br><span class="line">flag = 1;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p-&gt;next != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">if (p-&gt;data &gt; p-&gt;next-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">T temp = p-&gt;data;</span><br><span class="line">p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">p-&gt;next-&gt;data = temp;</span><br><span class="line">flag = 0;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::CreateList(T endTag)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;前插法&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;输入数据，以&quot; &lt;&lt; endTag &lt;&lt; &quot;结束&quot; &lt;&lt; endl;</span><br><span class="line">T val;//停止输入的标志:endTag</span><br><span class="line">clear();</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line">bool flag = false;</span><br><span class="line">while (val != endTag)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* newNode = new Single_Llist&lt;T&gt;::Node(val);</span><br><span class="line">if (newNode == nullptr)  cout &lt;&lt; &quot;内存分配失败&quot; &lt;&lt; endl;</span><br><span class="line">newNode-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = newNode;</span><br><span class="line">if (flag == false)</span><br><span class="line">&#123;</span><br><span class="line">tail = head-&gt;next;</span><br><span class="line">tail-&gt;next = nullptr;</span><br><span class="line">flag = true;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::CreateList_byback(T endTag)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;后插法&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;输入数据， 以 &quot; &lt;&lt; endTag &lt;&lt; &quot;结束&quot; &lt;&lt; endl;</span><br><span class="line">T val;</span><br><span class="line">clear();</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line">while (val != endTag)</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* newNode = new Single_Llist&lt;T&gt;::Node(val);</span><br><span class="line">if (newNode == nullptr) cout &lt;&lt; &quot;内存分配失败&quot; &lt;&lt; endl;</span><br><span class="line">tail-&gt;next = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::print()</span><br><span class="line">&#123;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* p = head-&gt;next;</span><br><span class="line">while (p != nullptr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; &quot; &quot;;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void Single_Llist&lt;T&gt;::Merge(Single_Llist&lt;T&gt;&amp; LA, Single_Llist&lt;T&gt;&amp; LB)</span><br><span class="line">&#123;</span><br><span class="line">LA.Sort(), LB.Sort();</span><br><span class="line">Single_Llist&lt;T&gt;::Node* current = head;</span><br><span class="line">Single_Llist&lt;T&gt;::Node* ptra = LA.getFirst();</span><br><span class="line">Single_Llist&lt;T&gt;::Node* ptrb = LB.getFirst();</span><br><span class="line">while (ptra &amp;&amp; ptrb)</span><br><span class="line">&#123;</span><br><span class="line">T x, y;</span><br><span class="line">x = ptra-&gt;data;</span><br><span class="line">y = ptrb-&gt;data;</span><br><span class="line">if (x &lt; y)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(x);</span><br><span class="line">ptra = ptra-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">if (x &gt; y)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(y);</span><br><span class="line">ptrb = ptrb-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(x);</span><br><span class="line">ptra = ptra-&gt;next;</span><br><span class="line">ptrb = ptrb-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while (ptra)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(ptra-&gt;data);</span><br><span class="line">ptra = ptra-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">tail = ptra;</span><br><span class="line">&#125;</span><br><span class="line">while (ptrb)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = new Single_Llist&lt;T&gt;::Node(ptrb-&gt;data);</span><br><span class="line">ptrb = ptrb-&gt;next;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">tail = ptrb;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中间略微总结一下我遇到的问题吧，首先就是发现使用模板后.h文件和.cpp文件链接不上，这算是模板类特有的写法，因为当实例化一个模板时，编译器必须看到模板确切的定义，而不仅仅是它的声明。因此，最好的办法就是将模板的声明和定义都放置在同一个.h文件中，在实现时用inline修饰保证函数符号只有一个,当然用static修饰也是可以的。(需要注意，inline是不能用在普通类普通链接实现中的，新标准取消了默认情况下inline作为内联函数的含义)</p><p>关于这一点我还发现了一个算是邪门歪道的方法，就是如果要写正常的翻译单元，也就是.h和.cpp文件，正常链接也是可以的，只需要在主函数里从原来的包含翻译单元头文件改成包含翻译单元源文件就行，但是这个方法具有很大的局限性，就是如果翻译单元里有除了模板函数以外的具体函数，那么就会报错重定义了符号。因为编译是按源文件编译，include的作用仅仅是拷贝文件到指定位置，要是在主函数(.cpp)里包含.cpp，相当于被包含的翻译单元中的函数被编译了两遍。而模板函数能成为例外的原因，就在于inline关键字，是作用于全局的，保证在函数全名相同(namespace::classname::funcname)的情况下，同名函数只被编译一次，只保留一个版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在学完单链表后，我发现网上的代码大多是以C语言的面向过程的思想写就的，于是我想用C++面对对象的思想重新构建一下单链表类。经过对照所有能获取的资料，总结了一共两套代码，第一套是体现的基本的链表思想，第二套则尝试融入更多带有C++特性的东西。&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="数据结构" scheme="http://ryan6073.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="单链表" scheme="http://ryan6073.github.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
    <category term="面对对象" scheme="http://ryan6073.github.io/tags/%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>2022年末，我做了一件很酷的事</title>
    <link href="http://ryan6073.github.io/2022/12/31/2022%E5%B9%B4%E6%9C%AB%EF%BC%8C%E6%88%91%E5%81%9A%E4%BA%86%E4%B8%80%E4%BB%B6%E5%BE%88%E9%85%B7%E7%9A%84%E4%BA%8B/"/>
    <id>http://ryan6073.github.io/2022/12/31/2022%E5%B9%B4%E6%9C%AB%EF%BC%8C%E6%88%91%E5%81%9A%E4%BA%86%E4%B8%80%E4%BB%B6%E5%BE%88%E9%85%B7%E7%9A%84%E4%BA%8B/</id>
    <published>2022-12-31T15:43:39.000Z</published>
    <updated>2023-03-05T13:50:28.953Z</updated>
    
    <content type="html"><![CDATA[<p>只是觉得有一个个人博客是一件很酷的事情，于是就去做了。</p><p>前几天突发奇想，突然想要拥有一个个人网站，又难得没有别的事情要忙，于是干脆一不做二不休选择了做一个个人博客。现在想起来其实很容易，但是当时实现的时候花费的时间却远比想象要多，因为一开始也没敲定要用Hexo搭建，甚至每种技术都去了解了一下，还没开始就花费了许多精力，所以预想一两天做完的事情实际花了大约四五天，过程也是十分曲折。</p><p>虽然这可能没有特别多的意义，甚至博客也不会有很多访问，但是我还是想要把这件事情做好，后续也会不断完善整个网站的功能，包括评论留言板，聊天室，搜索系统等等。当然，这些只是技术层面上的事情，我个人分享的博客内容，后续也会完善一些，大致会开放我喜欢的音乐，推荐的电影，遇见的有趣的人和事，好玩的游戏，当然也会有我大学学习过程中一些专业相关的知识总结，整体来说大概就是定位在一个雅俗共赏的个人空间吧，如果你有很好的建议，请留言给我，如果你相信我是潜力股，请一定要收藏起来我的个人博客，这也许会在未来的某天给到你意想不到的帮助，而你的关注一定会给到我不可或缺的帮助！</p><p>所以，十分荣幸能在此与你相遇，那么，请多多指教，在这熙熙攘攘的现代世界，请享受我为你我开辟的，这安静的小小一隅。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;只是觉得有一个个人博客是一件很酷的事情，于是就去做了。&lt;/p&gt;
&lt;p&gt;前几天突发奇想，突然想要拥有一个个人网站，又难得没有别的事情要忙，于是干脆一不做二不休选择了做一个个人博客。现在想起来其实很容易，但是当时实现的时候花费的时间却远比想象要多，因为一开始也没敲定要用Hexo</summary>
      
    
    
    
    <category term="个人随想" scheme="http://ryan6073.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="兴趣" scheme="http://ryan6073.github.io/tags/%E5%85%B4%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客之部署butterfly小结</title>
    <link href="http://ryan6073.github.io/2022/12/29/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%83%A8%E7%BD%B2butterfly%E5%B0%8F%E7%BB%93/"/>
    <id>http://ryan6073.github.io/2022/12/29/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%83%A8%E7%BD%B2butterfly%E5%B0%8F%E7%BB%93/</id>
    <published>2022-12-29T07:27:51.000Z</published>
    <updated>2023-01-17T15:48:49.353Z</updated>
    
    <content type="html"><![CDATA[<p>更换butterfly主题后报错：extends includes&#x2F;layout.pug block content #recent-posts.recent-posts include includes&#x2F;recent-posts.pug include includes&#x2F;pagination.pug<br>原因在于butterfly的git仓库很久没更新了，而依赖的组件很多易名或者不支持了，所以需要更新一下，在Git Bash里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>然后会出现很多提醒和报错，按照提示输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm audit fix</span><br></pre></td></tr></table></figure><p>之后正常更新一下静态文件重新生成即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;更换butterfly主题后报错：extends includes&amp;#x2F;layout.pug block content #recent-posts.recent-posts include includes&amp;#x2F;recent-posts.pug include</summary>
      
    
    
    
    <category term="博客搭建" scheme="http://ryan6073.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="部署butterfly" scheme="http://ryan6073.github.io/tags/%E9%83%A8%E7%BD%B2butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github博客搭建小结</title>
    <link href="http://ryan6073.github.io/2022/12/27/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%BB%93/"/>
    <id>http://ryan6073.github.io/2022/12/27/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%BB%93/</id>
    <published>2022-12-27T14:25:51.000Z</published>
    <updated>2023-01-17T15:47:13.342Z</updated>
    
    <content type="html"><![CDATA[<p>时至如今，其实个人博客搭建网上已经有很好的教程了，我也不赘述前人观点了，仅在我发现的大佬<a href="%22https://godweiyang.com/2018/04/13/hexo-blog/%22">韦阳</a>的一篇十分优秀的博客介绍上稍加补充，这里我主要讲一下博客中“连接GitHub和本地步骤”这一部分的出入：<br>首先右键打开Git Bash,然后输入下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;ryan6073&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;zhujs5521@mails.jlu.edu.cn&quot;</span></span><br></pre></td></tr></table></figure><p>这一步没有任何变化，用户名和邮箱根据GitHub账号信息自行修改即可。<br>然后下面rsa生成密钥SSH key这里出了问题，原因在于GitHub在2021年11月之后更新了签名算法，并且强制执行。按照原来的步骤执行会出现警告，然后提示要用到ED25519，这一点在GitHub网页端也可以得到印证，根据GitHub的提示，这样来操作即可，这里仍然是在Git Bash里输入命令，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C <span class="string">&quot;zhujs5521@mails.jlu.edu.cn&quot;</span></span><br></pre></td></tr></table></figure><p>然后在GitHub里新建SSH，这里也发生了改变，因为签名算法的改变，key并不能像之前一样写，需要这么输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure><p>复制输出的内容到新建SSH的key框中，名字照常随便取。然后让我们来检验一下就好了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现你的用户名，并且GitHub向你打招呼了，就算成功了。</p><p>另外，如果上传博客时出现Git报错：<br>fatal: unable to access OpenSSL SSL_read: Connection was reset, errno 10054<br>那么这时应该是因为服务器的SSL证书没有经过第三方机构签署，所以要输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.sslVerify “<span class="literal">false</span>”</span><br></pre></td></tr></table></figure><p>参考：<br><a href="%22https://godweiyang.com/2018/04/13/hexo-blog/%22">韦阳的博客</a><br><a href="%22https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account%22">GitHub关于新建SSH的教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时至如今，其实个人博客搭建网上已经有很好的教程了，我也不赘述前人观点了，仅在我发现的大佬&lt;a href=&quot;%22https://godweiyang.com/2018/04/13/hexo-blog/%22&quot;&gt;韦阳&lt;/a&gt;的一篇十分优秀的博客介绍上稍加补充，这里我主要讲一下</summary>
      
    
    
    
    <category term="博客搭建" scheme="http://ryan6073.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="http://ryan6073.github.io/tags/Hexo/"/>
    
    <category term="Github" scheme="http://ryan6073.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
